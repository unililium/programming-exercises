check_points (unsigned int index, unsigned int num_points_per_thread)
{
  int D.3036;
  double D.3037;
  int D.3038;
  double D.3039;
  double D.3040;
  double D.3041;
  double D.3042;
  unsigned int D.3045;
  unsigned int seed;
  unsigned int i;
  unsigned int local_count;

  try
    {
      seed = index;
      local_count = 0;
      i = 0;
      goto <D.3023>;
      <D.3022>:
      {
        double x;
        double y;

        D.3036 = rand_r (&seed);
        D.3037 = (double) D.3036;
        x = D.3037 / 2.147483647e+9;
        D.3038 = rand_r (&seed);
        D.3039 = (double) D.3038;
        y = D.3039 / 2.147483647e+9;
        printf ("Thread %d - Point %f %f\n", index, x, y);
        D.3040 = x * x;
        D.3041 = y * y;
        D.3042 = D.3040 + D.3041;
        if (D.3042 <= 1.0e+0) goto <D.3043>; else goto <D.3044>;
        <D.3043>:
        local_count = local_count + 1;
        <D.3044>:
      }
      i = i + 1;
      <D.3023>:
      if (i < num_points_per_thread) goto <D.3022>; else goto <D.3024>;
      <D.3024>:
      D.3045 = local_count;
      return D.3045;
    }
  finally
    {
      seed = {CLOBBER};
    }
}


__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int D.3048;

  D.3048 = __printf_chk (1, __fmt, __builtin_va_arg_pack ());
  return D.3048;
}


main (int argc, char * * argv)
{
  struct _IO_FILE * stdout.0;
  int D.3053;
  char * * D.3054;
  char * D.3055;
  int D.3056;
  char * * D.3057;
  char * D.3058;
  int D.3059;
  int D.3060;
  int num_threads.1;
  int D.3062;
  double D.3070;
  double D.3071;
  double D.3072;

  {
    unsigned int num_points;
    unsigned int num_threads;
    unsigned int inside_points;
    double pi;

    if (argc != 3) goto <D.3050>; else goto <D.3051>;
    <D.3050>:
    stdout.0 = stdout;
    fprintf (stdout.0, "Wrong number of parameters\n");
    D.3053 = 0;
    return D.3053;
    <D.3051>:
    D.3054 = argv + 8;
    D.3055 = *D.3054;
    D.3056 = atoi (D.3055);
    num_points = (unsigned int) D.3056;
    printf ("Number of points is %d\n", num_points);
    D.3057 = argv + 16;
    D.3058 = *D.3057;
    D.3059 = atoi (D.3058);
    num_threads = (unsigned int) D.3059;
    inside_points = 0;
    D.3060 = omp_get_max_threads ();
    stdout.0 = stdout;
    fprintf (stdout.0, "%d\n", D.3060);
    num_threads.1 = (int) num_threads;
    omp_set_num_threads (num_threads.1);
    D.3062 = omp_get_max_threads ();
    stdout.0 = stdout;
    fprintf (stdout.0, "%d\n", D.3062);
    #pragma omp parallel reduction(+:inside_points) shared(num_threads) shared(num_points)
      {
        unsigned int D.3063;
        unsigned int iftmp.2;
        unsigned int D.3065;
        unsigned int D.3069;

        {
          unsigned int index;

          #pragma omp for nowait
          for (index = 0; index < num_threads; index = index + 1)
            {
              {
                unsigned int num_points_per_thread;

                D.3063 = num_points / num_threads;
                D.3065 = num_points % num_threads;
                if (D.3065 > index) goto <D.3066>; else goto <D.3067>;
                <D.3066>:
                iftmp.2 = 1;
                goto <D.3068>;
                <D.3067>:
                iftmp.2 = 0;
                <D.3068>:
                num_points_per_thread = D.3063 + iftmp.2;
                D.3069 = check_points (index, num_points_per_thread);
                inside_points = D.3069 + inside_points;
              }
            }
        }
      }
    D.3070 = (double) inside_points;
    D.3071 = D.3070 * 4.0e+0;
    D.3072 = (double) num_points;
    pi = D.3071 / D.3072;
    stdout.0 = stdout;
    fprintf (stdout.0, "Computed pi is %f\n", pi);
    D.3053 = 0;
    return D.3053;
  }
  D.3053 = 0;
  return D.3053;
}


__attribute__((__gnu_inline__, __pure__, __leaf__, __nothrow__))
atoi (const char * __nptr)
{
  int D.3121;
  long int D.3122;

  D.3122 = strtol (__nptr, 0B, 10);
  D.3121 = (int) D.3122;
  return D.3121;
}


__attribute__((__artificial__, __gnu_inline__, __always_inline__))
fprintf (struct FILE * restrict __stream, const char * restrict __fmt)
{
  int D.3124;

  D.3124 = __fprintf_chk (__stream, 1, __fmt, __builtin_va_arg_pack ());
  return D.3124;
}


