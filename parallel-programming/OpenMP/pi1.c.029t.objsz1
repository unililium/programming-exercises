
;; Function fprintf (fprintf, funcdef_no=10, decl_uid=738, cgraph_uid=10, symbol_order=10)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
fprintf (struct FILE * restrict __stream, const char * restrict __fmt)
{
  int _5;

  <bb 2>:
  _5 = __fprintf_chk (__stream_2(D), 1, __fmt_3(D), __builtin_va_arg_pack ());
  return _5;

}



;; Function printf (printf, funcdef_no=11, decl_uid=760, cgraph_uid=11, symbol_order=11)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2>:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function atoi (atoi, funcdef_no=18, decl_uid=2448, cgraph_uid=18, symbol_order=18)

__attribute__((__gnu_inline__, __pure__, __leaf__, __nothrow__))
atoi (const char * __nptr)
{
  long int _4;
  int _5;

  <bb 2>:
  _4 = strtol (__nptr_2(D), 0B, 10);
  _5 = (int) _4;
  return _5;

}



;; Function check_points (check_points, funcdef_no=28, decl_uid=3015, cgraph_uid=28, symbol_order=28)

check_points (unsigned int index, unsigned int num_points_per_thread)
{
  int D.3139;
  double y;
  double x;
  unsigned int local_count;
  unsigned int i;
  unsigned int seed;
  int _12;
  double _13;
  int _16;
  double _17;
  double _20;
  double _21;
  double _22;
  unsigned int _25;
  int _27;

  <bb 2>:
  seed = index_6(D);
  local_count_8 = 0;
  i_9 = 0;
  goto <bb 6>;

  <bb 3>:
  _12 = rand_r (&seed);
  _13 = (double) _12;
  x_14 = _13 / 2.147483647e+9;
  _16 = rand_r (&seed);
  _17 = (double) _16;
  y_18 = _17 / 2.147483647e+9;
  _27 = __printf_chk (1, "Thread %d - Point %f %f\n", index_6(D), x_14, y_18);
  _29 = _27;
  _20 = x_14 * x_14;
  _21 = y_18 * y_18;
  _22 = _20 + _21;
  if (_22 <= 1.0e+0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  local_count_23 = local_count_3 + 1;

  <bb 5>:
  # local_count_2 = PHI <local_count_3(3), local_count_23(4)>
  i_24 = i_1 + 1;

  <bb 6>:
  # i_1 = PHI <i_9(2), i_24(5)>
  # local_count_3 = PHI <local_count_8(2), local_count_2(5)>
  if (i_1 < num_points_per_thread_10(D))
    goto <bb 3>;
  else
    goto <bb 7>;

  <bb 7>:
  _25 = local_count_3;
  seed ={v} {CLOBBER};
  return _25;

}



;; Function main._omp_fn.0 (main._omp_fn.0, funcdef_no=30, decl_uid=3074, cgraph_uid=32, symbol_order=32)

main._omp_fn.0 (struct .omp_data_s.3 & restrict .omp_data_i)
{
  unsigned int num_points_per_thread;
  unsigned int index;
  unsigned int num_points;
  unsigned int num_threads;
  unsigned int inside_points;
  unsigned int q.6_3;
  unsigned int tt.7_4;
  unsigned int iftmp.2_6;
  unsigned int num_threads.4_14;
  int _15;
  unsigned int _16;
  int _17;
  unsigned int _18;
  unsigned int q.6_19;
  unsigned int tt.7_20;
  unsigned int tt.7_21;
  unsigned int q.6_22;
  unsigned int _23;
  unsigned int _24;
  unsigned int _25;
  unsigned int _27;
  unsigned int _28;
  unsigned int iftmp.2_29;
  unsigned int iftmp.2_30;
  unsigned int _33;
  unsigned int * _36;

  <bb 2>:
  inside_points_9 = 0;
  num_threads_12 = .omp_data_i_11(D)->num_threads;
  num_points_13 = .omp_data_i_11(D)->num_points;
  num_threads.4_14 = num_threads_12;
  if (0 < num_threads.4_14)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  # inside_points_2 = PHI <inside_points_9(5), inside_points_34(8), inside_points_9(2)>
  _36 = &.omp_data_i_11(D)->inside_points;
  __atomic_fetch_add_4 (_36, inside_points_2, 0);
  return;

  <bb 4>:
  _15 = __builtin_omp_get_num_threads ();
  _16 = (unsigned int) _15;
  _17 = __builtin_omp_get_thread_num ();
  _18 = (unsigned int) _17;
  q.6_19 = num_threads.4_14 / _16;
  tt.7_20 = num_threads.4_14 % _16;
  if (_18 < tt.7_20)
    goto <bb 11>;
  else
    goto <bb 5>;

  <bb 5>:
  # q.6_3 = PHI <q.6_22(11), q.6_19(4)>
  # tt.7_4 = PHI <tt.7_21(11), tt.7_20(4)>
  _23 = q.6_3 * _18;
  _24 = _23 + tt.7_4;
  _25 = _24 + q.6_3;
  if (_24 >= _25)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 6>:
  index_26 = _24;

  <bb 7>:
  # inside_points_1 = PHI <inside_points_9(6), inside_points_34(8)>
  # index_5 = PHI <index_26(6), index_35(8)>
  _27 = num_points_13 / num_threads_12;
  _28 = num_points_13 % num_threads_12;
  if (_28 > index_5)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 8>:
  # iftmp.2_6 = PHI <iftmp.2_29(10), iftmp.2_30(9)>
  num_points_per_thread_31 = _27 + iftmp.2_6;
  _33 = check_points (index_5, num_points_per_thread_31);
  inside_points_34 = _33 + inside_points_1;
  index_35 = index_5 + 1;
  if (index_35 < _25)
    goto <bb 7>;
  else
    goto <bb 3>;

  <bb 9>:
  iftmp.2_30 = 0;
  goto <bb 8>;

  <bb 10>:
  iftmp.2_29 = 1;
  goto <bb 8>;

  <bb 11>:
  tt.7_21 = 0;
  q.6_22 = q.6_19 + 1;
  goto <bb 5>;

}



;; Function main (main, funcdef_no=29, decl_uid=3027, cgraph_uid=29, symbol_order=29)

main (int argc, char * * argv)
{
  int D.3160;
  int D.3158;
  int D.3156;
  int D.3154;
  int D.3151;
  int D.3148;
  int D.3145;
  double pi;
  unsigned int inside_points;
  unsigned int num_threads;
  unsigned int num_points;
  struct .omp_data_s.3 .omp_data_o.5;
  int _1;
  struct _IO_FILE * stdout.0_5;
  int _7;
  char * * _9;
  char * _10;
  int _11;
  char * * _14;
  char * _15;
  int _16;
  int _20;
  struct _IO_FILE * stdout.0_21;
  int num_threads.1_23;
  int _26;
  struct _IO_FILE * stdout.0_27;
  double _35;
  double _36;
  double _37;
  struct _IO_FILE * stdout.0_39;
  int _41;
  int _42;
  int _43;
  int _44;
  int _45;
  long int _46;
  int _47;
  int _48;
  long int _49;
  int _50;

  <bb 2>:
  if (argc_3(D) != 3)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  stdout.0_5 = stdout;
  _42 = __fprintf_chk (stdout.0_5, 1, "Wrong number of parameters\n");
  _52 = _42;
  _7 = 0;
  goto <bb 5>;

  <bb 4>:
  _9 = argv_8(D) + 8;
  _10 = *_9;
  _49 = strtol (_10, 0B, 10);
  _50 = (int) _49;
  _54 = _50;
  _11 = _54;
  num_points_12 = (unsigned int) _11;
  _48 = __printf_chk (1, "Number of points is %d\n", num_points_12);
  _56 = _48;
  _14 = argv_8(D) + 16;
  _15 = *_14;
  _46 = strtol (_15, 0B, 10);
  _47 = (int) _46;
  _58 = _47;
  _16 = _58;
  num_threads_17 = (unsigned int) _16;
  inside_points_18 = 0;
  _20 = omp_get_max_threads ();
  stdout.0_21 = stdout;
  _45 = __fprintf_chk (stdout.0_21, 1, "%d\n", _20);
  _60 = _45;
  num_threads.1_23 = (int) num_threads_17;
  omp_set_num_threads (num_threads.1_23);
  _26 = omp_get_max_threads ();
  stdout.0_27 = stdout;
  _44 = __fprintf_chk (stdout.0_27, 1, "%d\n", _26);
  _62 = _44;
  .omp_data_o.5.inside_points = inside_points_18;
  .omp_data_o.5.num_threads = num_threads_17;
  .omp_data_o.5.num_points = num_points_12;
  __builtin_GOMP_parallel (main._omp_fn.0, &.omp_data_o.5, 0, 0);
  inside_points_33 = .omp_data_o.5.inside_points;
  .omp_data_o.5 ={v} {CLOBBER};
  _35 = (double) inside_points_33;
  _36 = _35 * 4.0e+0;
  _37 = (double) num_points_12;
  pi_38 = _36 / _37;
  stdout.0_39 = stdout;
  _43 = __fprintf_chk (stdout.0_39, 1, "Computed pi is %f\n", pi_38);
  _64 = _43;
  _41 = 0;

  <bb 5>:
  # _1 = PHI <_7(3), _41(4)>
  return _1;

}


