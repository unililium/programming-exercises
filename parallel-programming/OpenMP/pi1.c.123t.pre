
;; Function main._omp_fn.0 (main._omp_fn.0, funcdef_no=30, decl_uid=3074, cgraph_uid=32, symbol_order=32)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
.omp_data_i = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
num_threads_12 = *.omp_data_i + 32
num_points_13 = *.omp_data_i
inside_points_2 = &NULL
inside_points_2 = inside_points_30
inside_points_2 = &NULL
_32 = .omp_data_i + 64
ESCAPED = _32
ESCAPED = inside_points_2
ESCAPED = &NULL
_15 = &NONLOCAL
_16 = _15
_17 = &NONLOCAL
_18 = _17
q.6_19 = num_threads_12
q.6_19 = _16
tt.7_20 = num_threads_12
tt.7_20 = _16
q.6_3 = q.6_21
q.6_3 = q.6_19
tt.7_4 = &NULL
tt.7_4 = tt.7_20
_22 = q.6_3
_22 = _18
_23 = tt.7_4
_23 = _22
_24 = q.6_3
_24 = _23
inside_points_1 = &NULL
inside_points_1 = inside_points_30
index_5 = _23
index_5 = index_31
_25 = num_points_13
_25 = num_threads_12
_26 = num_points_13
_26 = num_threads_12
_29 = _9
num_points_per_thread_27 = _25
num_points_per_thread_27 = _29
seed = index_5
local_count_64 = &NULL
local_count_64 = local_count_47
i_55 = &NULL
i_55 = i_46
ESCAPED = &seed
_34 = NONLOCAL
_35 = _34
x_36 = _35
x_36 = &NONLOCAL
ESCAPED = &seed
_37 = NONLOCAL
_38 = _37
y_39 = _38
y_39 = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = index_5
ESCAPED = x_36
ESCAPED = y_39
_40 = x_36
_40 = x_36
_41 = y_39
_41 = y_39
_42 = _40
_42 = _41
local_count_44 = local_count_64
local_count_44 = &NONLOCAL
local_count_47 = local_count_64
local_count_47 = local_count_44
i_46 = i_55
i_46 = &NONLOCAL
local_count_65 = local_count_47
local_count_65 = &NULL
inside_points_30 = inside_points_1
inside_points_30 = local_count_65
index_31 = index_5
index_31 = &NONLOCAL
q.6_21 = q.6_19
q.6_21 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL PARM_NOALIAS(9) seed }
NONLOCAL = { ESCAPED NONLOCAL } same as _34
STOREDANYTHING = { }
INTEGER = { ANYTHING }
.omp_data_i = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
num_threads_12 = { ESCAPED NONLOCAL }
num_points_13 = { ESCAPED NONLOCAL }
inside_points_2 = { NULL NONLOCAL }
inside_points_30 = { NULL NONLOCAL } same as inside_points_2
_32 = { PARM_NOALIAS(9) }
__atomic_fetch_add_4 = { }
omp_get_num_threads = { }
_15 = { NONLOCAL }
_16 = { NONLOCAL } same as _15
omp_get_thread_num = { }
_17 = { NONLOCAL } same as _15
_18 = { NONLOCAL } same as _15
q.6_19 = { ESCAPED NONLOCAL }
tt.7_20 = { ESCAPED NONLOCAL } same as q.6_19
q.6_3 = { ESCAPED NONLOCAL } same as q.6_19
q.6_21 = { ESCAPED NONLOCAL } same as q.6_19
tt.7_4 = { NULL ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL } same as q.6_19
_23 = { NULL ESCAPED NONLOCAL } same as tt.7_4
_24 = { NULL ESCAPED NONLOCAL } same as tt.7_4
inside_points_1 = { NULL NONLOCAL } same as inside_points_2
index_5 = { NULL ESCAPED NONLOCAL } same as tt.7_4
index_31 = { NULL ESCAPED NONLOCAL } same as tt.7_4
_25 = { ESCAPED NONLOCAL }
_26 = { ESCAPED NONLOCAL } same as _25
_9 = { }
_29 = { }
num_points_per_thread_27 = { ESCAPED NONLOCAL } same as _25
seed = { NULL ESCAPED NONLOCAL }
local_count_64 = { NULL NONLOCAL } same as inside_points_2
local_count_47 = { NULL NONLOCAL } same as inside_points_2
i_55 = { NULL NONLOCAL } same as inside_points_2
i_46 = { NULL NONLOCAL } same as inside_points_2
rand_r = { }
_34 = { ESCAPED NONLOCAL }
_35 = { ESCAPED NONLOCAL } same as _34
x_36 = { ESCAPED NONLOCAL } same as _34
_37 = { ESCAPED NONLOCAL } same as _34
_38 = { ESCAPED NONLOCAL } same as _34
y_39 = { ESCAPED NONLOCAL } same as _34
__printf_chk = { }
_40 = { ESCAPED NONLOCAL } same as _34
_41 = { ESCAPED NONLOCAL } same as _34
_42 = { ESCAPED NONLOCAL } same as _34
local_count_44 = { NULL NONLOCAL } same as inside_points_2
local_count_65 = { NULL NONLOCAL } same as inside_points_2


Alias information for main._omp_fn.0

Aliased symbols

seed, UID D.3164, unsigned int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3164 D.3172 } (nonlocal, escaped)

Flow-insensitive points-to information

.omp_data_i_11(D), points-to vars: { D.3172 } (nonlocal, escaped)
_32, points-to vars: { D.3172 } (nonlocal, escaped)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 12 3 4 13 5 15 14 6 17 16 7 18 8 9 19 20 10 22 21 11
;;
;; Loop 1
;;  header 6, latch 21
;;  depth 1, outer 0
;;  nodes: 6 21 10 20 17 9 18 8 7 16 19
;;
;; Loop 2
;;  header 7, latch 19
;;  depth 2, outer 1
;;  nodes: 7 19 9 18 8
;; 2 succs { 4 12 }
;; 12 succs { 3 }
;; 3 succs { 1 }
;; 4 succs { 11 13 }
;; 13 succs { 5 }
;; 5 succs { 14 15 }
;; 15 succs { 3 }
;; 14 succs { 6 }
;; 6 succs { 16 17 }
;; 17 succs { 10 }
;; 16 succs { 7 }
;; 7 succs { 8 18 }
;; 18 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 19 20 }
;; 19 succs { 7 }
;; 20 succs { 10 }
;; 10 succs { 21 22 }
;; 22 succs { 3 }
;; 21 succs { 6 }
;; 11 succs { 5 }
find_duplicates: <bb 12> duplicate of <bb 15>
Removing basic block 15

Symbols to be put in SSA form
{ D.3130 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 23
Number of blocks to update: 21 ( 91%)


Removing basic block 12
Removing basic block 13
Removing basic block 16
Removing basic block 17
Removing basic block 18
Removing basic block 19
Removing basic block 20
Removing basic block 21
Removing basic block 22
main._omp_fn.0 (struct .omp_data_s.3 & restrict .omp_data_i)
{
  unsigned int seed;
  unsigned int i;
  unsigned int local_count;
  double x;
  double y;
  unsigned int D.3169;
  unsigned int num_points_per_thread;
  unsigned int index;
  unsigned int num_points;
  unsigned int num_threads;
  unsigned int inside_points;
  unsigned int q.6_3;
  unsigned int tt.7_4;
  _Bool _9;
  int _15;
  unsigned int _16;
  int _17;
  unsigned int _18;
  unsigned int q.6_19;
  unsigned int tt.7_20;
  unsigned int q.6_21;
  unsigned int _22;
  unsigned int _23;
  unsigned int _24;
  unsigned int _29;
  unsigned int * _32;
  int _34;
  double _35;
  int _37;
  double _38;
  double _40;
  double _41;
  double _42;
  unsigned int _57;
  unsigned int _59;

  <bb 2>:
  num_threads_12 = *.omp_data_i_11(D).num_threads;
  num_points_13 = *.omp_data_i_11(D).num_points;
  if (num_threads_12 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  # inside_points_2 = PHI <0(5), inside_points_30(11), 0(2)>
  _32 = &.omp_data_i_11(D)->inside_points;
  __atomic_fetch_add_4 (_32, inside_points_2, 0);
  return;

  <bb 4>:
  _15 = __builtin_omp_get_num_threads ();
  _16 = (unsigned int) _15;
  _17 = __builtin_omp_get_thread_num ();
  _18 = (unsigned int) _17;
  q.6_19 = num_threads_12 / _16;
  tt.7_20 = num_threads_12 % _16;
  if (_18 < tt.7_20)
    goto <bb 12>;
  else
    goto <bb 5>;

  <bb 5>:
  # q.6_3 = PHI <q.6_21(12), q.6_19(4)>
  # tt.7_4 = PHI <0(12), tt.7_20(4)>
  _22 = q.6_3 * _18;
  _23 = tt.7_4 + _22;
  _24 = q.6_3 + _23;
  if (_23 >= _24)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 6>:
  _59 = num_points_13 / num_threads_12;
  _57 = num_points_13 % num_threads_12;

  <bb 7>:
  # inside_points_1 = PHI <0(6), inside_points_30(11)>
  # index_5 = PHI <_23(6), index_31(11)>
  _9 = index_5 < _57;
  _29 = (unsigned int) _9;
  num_points_per_thread_27 = _29 + _59;
  seed = index_5;
  if (num_points_per_thread_27 != 0)
    goto <bb 8>;
  else
    goto <bb 11>;

  <bb 8>:
  # local_count_64 = PHI <0(7), local_count_47(10)>
  # i_55 = PHI <0(7), i_46(10)>
  _34 = rand_r (&seed);
  _35 = (double) _34;
  x_36 = _35 / 2.147483647e+9;
  _37 = rand_r (&seed);
  _38 = (double) _37;
  y_39 = _38 / 2.147483647e+9;
  __printf_chk (1, "Thread %d - Point %f %f\n", index_5, x_36, y_39);
  _40 = x_36 * x_36;
  _41 = y_39 * y_39;
  _42 = _40 + _41;
  if (_42 <= 1.0e+0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  local_count_44 = local_count_64 + 1;

  <bb 10>:
  # local_count_47 = PHI <local_count_64(8), local_count_44(9)>
  i_46 = i_55 + 1;
  if (num_points_per_thread_27 > i_46)
    goto <bb 8>;
  else
    goto <bb 11>;

  <bb 11>:
  # local_count_65 = PHI <local_count_47(10), 0(7)>
  seed ={v} {CLOBBER};
  inside_points_30 = inside_points_1 + local_count_65;
  index_31 = index_5 + 1;
  if (_24 > index_31)
    goto <bb 7>;
  else
    goto <bb 3>;

  <bb 12>:
  q.6_21 = q.6_19 + 1;
  goto <bb 5>;

}



;; Function check_points (check_points, funcdef_no=28, decl_uid=3015, cgraph_uid=28, symbol_order=28)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
index = &NONLOCAL
num_points_per_thread = &NONLOCAL
seed = index
i_27 = &NULL
i_27 = i_21
local_count_28 = &NULL
local_count_28 = local_count_2
ESCAPED = &seed
_10 = NONLOCAL
_11 = _10
x_12 = _11
x_12 = &NONLOCAL
ESCAPED = &seed
_14 = NONLOCAL
_15 = _14
y_16 = _15
y_16 = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = index
ESCAPED = x_12
ESCAPED = y_16
_17 = x_12
_17 = x_12
_18 = y_16
_18 = y_16
_19 = _17
_19 = _18
local_count_20 = local_count_28
local_count_20 = &NONLOCAL
local_count_2 = local_count_28
local_count_2 = local_count_20
i_21 = i_27
i_21 = &NONLOCAL
local_count_29 = local_count_2
local_count_29 = &NULL
ESCAPED = local_count_29

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL seed }
NONLOCAL = { ESCAPED NONLOCAL } same as _10
STOREDANYTHING = { }
INTEGER = { ANYTHING }
index = { NONLOCAL }
num_points_per_thread = { NONLOCAL } same as index
seed = { ESCAPED NONLOCAL }
i_27 = { NULL NONLOCAL }
i_21 = { NULL NONLOCAL } same as i_27
local_count_28 = { NULL NONLOCAL } same as i_27
local_count_2 = { NULL NONLOCAL } same as i_27
rand_r = { }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _10
x_12 = { ESCAPED NONLOCAL } same as _10
_14 = { ESCAPED NONLOCAL } same as _10
_15 = { ESCAPED NONLOCAL } same as _10
y_16 = { ESCAPED NONLOCAL } same as _10
__printf_chk = { }
_17 = { ESCAPED NONLOCAL } same as _10
_18 = { ESCAPED NONLOCAL } same as _10
_19 = { ESCAPED NONLOCAL } same as _10
local_count_20 = { NULL NONLOCAL } same as i_27
local_count_29 = { NULL NONLOCAL } same as i_27


Alias information for check_points

Aliased symbols

seed, UID D.3017, unsigned int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3017 } (escaped)

Flow-insensitive points-to information


;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 8 7 3 9 4 5 10 11 6
;;
;; Loop 1
;;  header 3, latch 10
;;  depth 1, outer 0
;;  nodes: 3 10 5 9 4
;; 2 succs { 7 8 }
;; 8 succs { 6 }
;; 7 succs { 3 }
;; 3 succs { 4 9 }
;; 9 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 10 11 }
;; 10 succs { 3 }
;; 11 succs { 6 }
;; 6 succs { 1 }
check_points (unsigned int index, unsigned int num_points_per_thread)
{
  double y;
  double x;
  unsigned int local_count;
  unsigned int i;
  unsigned int seed;
  int _10;
  double _11;
  int _14;
  double _15;
  double _17;
  double _18;
  double _19;

  <bb 2>:
  seed = index_6(D);
  if (num_points_per_thread_8(D) != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 8>:
  goto <bb 6>;

  <bb 7>:

  <bb 3>:
  # i_27 = PHI <0(7), i_21(10)>
  # local_count_28 = PHI <0(7), local_count_2(10)>
  _10 = rand_r (&seed);
  _11 = (double) _10;
  x_12 = _11 / 2.147483647e+9;
  _14 = rand_r (&seed);
  _15 = (double) _14;
  y_16 = _15 / 2.147483647e+9;
  __printf_chk (1, "Thread %d - Point %f %f\n", index_6(D), x_12, y_16);
  _17 = x_12 * x_12;
  _18 = y_16 * y_16;
  _19 = _17 + _18;
  if (_19 <= 1.0e+0)
    goto <bb 4>;
  else
    goto <bb 9>;

  <bb 9>:
  goto <bb 5>;

  <bb 4>:
  local_count_20 = local_count_28 + 1;

  <bb 5>:
  # local_count_2 = PHI <local_count_28(9), local_count_20(4)>
  i_21 = i_27 + 1;
  if (num_points_per_thread_8(D) > i_21)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  goto <bb 3>;

  <bb 11>:

  <bb 6>:
  # local_count_29 = PHI <local_count_2(11), 0(8)>
  seed ={v} {CLOBBER};
  return local_count_29;

}



;; Function main (main, funcdef_no=29, decl_uid=3027, cgraph_uid=29, symbol_order=29) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
argc = &NONLOCAL
argv = &NONLOCAL
stdout = NONLOCAL
stdout.0_4 = stdout
ESCAPED = &STRING
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.0_4
_6 = *argv + 64
ESCAPED = _6
ESCAPED = &NULL
ESCAPED = &NONLOCAL
_30 = NONLOCAL
num_points_7 = _30
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = num_points_7
_8 = *argv + 128
ESCAPED = _8
ESCAPED = &NULL
ESCAPED = &NONLOCAL
_28 = NONLOCAL
_29 = _28
num_threads_9 = _28
_11 = NONLOCAL
stdout.0_12 = stdout
ESCAPED = stdout.0_12
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _11
ESCAPED = _29
_15 = NONLOCAL
stdout.0_16 = stdout
ESCAPED = stdout.0_16
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _15
.omp_data_o.5 = &NULL
.omp_data_o.5 = num_threads_9
.omp_data_o.5 = num_points_7
ESCAPED = &main._omp_fn.0
ESCAPED = &.omp_data_o.5
ESCAPED = &NULL
ESCAPED = &NULL
inside_points_21 = .omp_data_o.5
_23 = inside_points_21
_24 = _23
_24 = &NONLOCAL
_25 = num_points_7
pi_26 = _24
pi_26 = _25
stdout.0_27 = stdout
ESCAPED = stdout.0_27
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = pi_26
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL .omp_data_o.5 main._omp_fn.0 }
NONLOCAL = { ESCAPED NONLOCAL } same as stdout
STOREDANYTHING = { }
INTEGER = { ANYTHING }
argc = { NONLOCAL }
argv = { NONLOCAL } same as argc
stdout.0_4 = { ESCAPED NONLOCAL } same as stdout
stdout = { ESCAPED NONLOCAL }
fwrite = { }
_6 = { ESCAPED NONLOCAL }
strtol = { }
_30 = { ESCAPED NONLOCAL } same as stdout
num_points_7 = { ESCAPED NONLOCAL } same as stdout
__printf_chk = { }
_8 = { ESCAPED NONLOCAL }
_28 = { ESCAPED NONLOCAL } same as stdout
_29 = { ESCAPED NONLOCAL } same as stdout
num_threads_9 = { ESCAPED NONLOCAL } same as stdout
omp_get_max_threads = { }
_11 = { ESCAPED NONLOCAL } same as stdout
stdout.0_12 = { ESCAPED NONLOCAL } same as stdout
__fprintf_chk = { }
omp_set_num_threads = { }
_15 = { ESCAPED NONLOCAL } same as stdout
stdout.0_16 = { ESCAPED NONLOCAL } same as stdout
.omp_data_o.5 = { NULL ESCAPED NONLOCAL } same as inside_points_21
GOMP_parallel = { }
main._omp_fn.0 = { ESCAPED NONLOCAL }
inside_points_21 = { NULL ESCAPED NONLOCAL }
_23 = { NULL ESCAPED NONLOCAL } same as inside_points_21
_24 = { NULL ESCAPED NONLOCAL } same as inside_points_21
_25 = { ESCAPED NONLOCAL } same as stdout
pi_26 = { NULL ESCAPED NONLOCAL } same as inside_points_21
stdout.0_27 = { ESCAPED NONLOCAL } same as stdout


Alias information for main

Aliased symbols

.omp_data_o.5, UID D.3090, struct .omp_data_s.3, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3090 } (nonlocal, escaped)

Flow-insensitive points-to information

stdout.0_4, points-to non-local, points-to escaped, points-to vars: { }
argv_5(D), points-to non-local, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to vars: { }
stdout.0_12, points-to non-local, points-to escaped, points-to vars: { }
stdout.0_16, points-to non-local, points-to escaped, points-to vars: { }
stdout.0_27, points-to non-local, points-to escaped, points-to vars: { }

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
main (int argc, char * * argv)
{
  double pi;
  unsigned int inside_points;
  unsigned int num_threads;
  unsigned int num_points;
  struct .omp_data_s.3 .omp_data_o.5;
  struct _IO_FILE * stdout.0_4;
  char * _6;
  char * _8;
  int _11;
  struct _IO_FILE * stdout.0_12;
  int _15;
  struct _IO_FILE * stdout.0_16;
  double _23;
  double _24;
  double _25;
  struct _IO_FILE * stdout.0_27;
  long int _28;
  int _29;
  long int _30;

  <bb 2>:
  if (argc_2(D) != 3)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  stdout.0_4 = stdout;
  __builtin_fwrite ("Wrong number of parameters\n", 1, 27, stdout.0_4);
  goto <bb 5>;

  <bb 4>:
  _6 = MEM[(char * *)argv_5(D) + 8B];
  _30 = strtol (_6, 0B, 10);
  num_points_7 = (unsigned int) _30;
  __printf_chk (1, "Number of points is %d\n", num_points_7);
  _8 = MEM[(char * *)argv_5(D) + 16B];
  _28 = strtol (_8, 0B, 10);
  _29 = (int) _28;
  num_threads_9 = (unsigned int) _28;
  _11 = omp_get_max_threads ();
  stdout.0_12 = stdout;
  __fprintf_chk (stdout.0_12, 1, "%d\n", _11);
  omp_set_num_threads (_29);
  _15 = omp_get_max_threads ();
  stdout.0_16 = stdout;
  __fprintf_chk (stdout.0_16, 1, "%d\n", _15);
  .omp_data_o.5.inside_points = 0;
  .omp_data_o.5.num_threads = num_threads_9;
  .omp_data_o.5.num_points = num_points_7;
  __builtin_GOMP_parallel (main._omp_fn.0, &.omp_data_o.5, 0, 0);
  inside_points_21 = .omp_data_o.5.inside_points;
  .omp_data_o.5 ={v} {CLOBBER};
  _23 = (double) inside_points_21;
  _24 = _23 * 4.0e+0;
  _25 = (double) num_points_7;
  pi_26 = _24 / _25;
  stdout.0_27 = stdout;
  __fprintf_chk (stdout.0_27, 1, "Computed pi is %f\n", pi_26);

  <bb 5>:
  return 0;

}


