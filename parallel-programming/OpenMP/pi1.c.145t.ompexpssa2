
;; Function main._omp_fn.0 (main._omp_fn.0, funcdef_no=30, decl_uid=3074, cgraph_uid=32, symbol_order=32)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
.omp_data_i = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
num_threads_12 = *.omp_data_i + 32
inside_points_2 = &NULL
inside_points_2 = inside_points_54
inside_points_2 = &NULL
_32 = .omp_data_i + 64
ESCAPED = _32
ESCAPED = inside_points_2
ESCAPED = &NULL
_15 = &NONLOCAL
_16 = _15
_17 = &NONLOCAL
_18 = _17
q.6_19 = num_threads_12
q.6_19 = _16
tt.7_20 = num_threads_12
tt.7_20 = _16
q.6_3 = q.6_21
q.6_3 = q.6_19
tt.7_4 = &NULL
tt.7_4 = tt.7_20
_22 = q.6_3
_22 = _18
_23 = tt.7_4
_23 = _22
_24 = q.6_3
_24 = _23
num_points_13 = *.omp_data_i
_59 = num_points_13
_59 = num_threads_12
_57 = num_points_13
_57 = num_threads_12
inside_points_1 = &NULL
inside_points_1 = inside_points_30
index_5 = _23
index_5 = index_31
_29 = _9
num_points_per_thread_27 = _29
num_points_per_thread_27 = _59
seed = index_5
local_count_64 = &NULL
local_count_64 = local_count_47
i_55 = &NULL
i_55 = i_46
ESCAPED = &seed
_34 = NONLOCAL
_35 = _34
x_36 = _35
x_36 = &NONLOCAL
ESCAPED = &seed
_37 = NONLOCAL
_38 = _37
y_39 = _38
y_39 = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = index_5
ESCAPED = x_36
ESCAPED = y_39
_40 = x_36
_40 = x_36
_41 = y_39
_41 = y_39
_42 = _40
_42 = _41
local_count_44 = local_count_64
local_count_44 = &NONLOCAL
local_count_47 = local_count_64
local_count_47 = local_count_44
i_46 = i_55
i_46 = &NONLOCAL
local_count_48 = local_count_47
local_count_65 = local_count_48
local_count_65 = &NULL
inside_points_30 = inside_points_1
inside_points_30 = local_count_65
index_31 = index_5
index_31 = &NONLOCAL
inside_points_54 = inside_points_30
q.6_21 = q.6_19
q.6_21 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL PARM_NOALIAS(9) seed }
NONLOCAL = { ESCAPED NONLOCAL } same as _34
STOREDANYTHING = { }
INTEGER = { ANYTHING }
.omp_data_i = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
num_threads_12 = { ESCAPED NONLOCAL }
inside_points_2 = { NULL NONLOCAL }
inside_points_54 = { NULL NONLOCAL } same as inside_points_2
_32 = { PARM_NOALIAS(9) }
__atomic_fetch_add_4 = { }
omp_get_num_threads = { }
_15 = { NONLOCAL }
_16 = { NONLOCAL } same as _15
omp_get_thread_num = { }
_17 = { NONLOCAL } same as _15
_18 = { NONLOCAL } same as _15
q.6_19 = { ESCAPED NONLOCAL }
tt.7_20 = { ESCAPED NONLOCAL } same as q.6_19
q.6_3 = { ESCAPED NONLOCAL } same as q.6_19
q.6_21 = { ESCAPED NONLOCAL } same as q.6_19
tt.7_4 = { NULL ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL } same as q.6_19
_23 = { NULL ESCAPED NONLOCAL } same as tt.7_4
_24 = { NULL ESCAPED NONLOCAL } same as tt.7_4
num_points_13 = { ESCAPED NONLOCAL }
_59 = { ESCAPED NONLOCAL }
_57 = { ESCAPED NONLOCAL } same as _59
inside_points_1 = { NULL NONLOCAL } same as inside_points_2
inside_points_30 = { NULL NONLOCAL } same as inside_points_2
index_5 = { NULL ESCAPED NONLOCAL } same as tt.7_4
index_31 = { NULL ESCAPED NONLOCAL } same as tt.7_4
_9 = { }
_29 = { }
num_points_per_thread_27 = { ESCAPED NONLOCAL } same as _59
seed = { NULL ESCAPED NONLOCAL }
local_count_64 = { NULL NONLOCAL } same as inside_points_2
local_count_47 = { NULL NONLOCAL } same as inside_points_2
i_55 = { NULL NONLOCAL } same as inside_points_2
i_46 = { NULL NONLOCAL } same as inside_points_2
rand_r = { }
_34 = { ESCAPED NONLOCAL }
_35 = { ESCAPED NONLOCAL } same as _34
x_36 = { ESCAPED NONLOCAL } same as _34
_37 = { ESCAPED NONLOCAL } same as _34
_38 = { ESCAPED NONLOCAL } same as _34
y_39 = { ESCAPED NONLOCAL } same as _34
__printf_chk = { }
_40 = { ESCAPED NONLOCAL } same as _34
_41 = { ESCAPED NONLOCAL } same as _34
_42 = { ESCAPED NONLOCAL } same as _34
local_count_44 = { NULL NONLOCAL } same as inside_points_2
local_count_48 = { NULL NONLOCAL } same as inside_points_2
local_count_65 = { NULL NONLOCAL } same as inside_points_2


Alias information for main._omp_fn.0

Aliased symbols

seed, UID D.3164, unsigned int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3164 D.3174 } (nonlocal, escaped)

Flow-insensitive points-to information

.omp_data_i_11(D), points-to vars: { D.3174 } (nonlocal, escaped)
_32, points-to vars: { D.3174 } (nonlocal, escaped)

main._omp_fn.0 (struct .omp_data_s.3 & restrict .omp_data_i)
{
  unsigned int seed;
  unsigned int i;
  unsigned int local_count;
  double x;
  double y;
  unsigned int D.3169;
  unsigned int num_points_per_thread;
  unsigned int index;
  unsigned int num_points;
  unsigned int num_threads;
  unsigned int inside_points;
  unsigned int q.6_3;
  unsigned int tt.7_4;
  _Bool _9;
  int _15;
  unsigned int _16;
  int _17;
  unsigned int _18;
  unsigned int q.6_19;
  unsigned int tt.7_20;
  unsigned int q.6_21;
  unsigned int _22;
  unsigned int _23;
  unsigned int _24;
  unsigned int _29;
  unsigned int * _32;
  int _34;
  double _35;
  int _37;
  double _38;
  double _40;
  double _41;
  double _42;
  unsigned int _57;
  unsigned int _59;

  <bb 2>:
  num_threads_12 = *.omp_data_i_11(D).num_threads;
  if (num_threads_12 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  # inside_points_2 = PHI <0(5), inside_points_54(15), 0(2)>
  _32 = &.omp_data_i_11(D)->inside_points;
  __atomic_fetch_add_4 (_32, inside_points_2, 0);
  return;

  <bb 4>:
  _15 = __builtin_omp_get_num_threads ();
  _16 = (unsigned int) _15;
  _17 = __builtin_omp_get_thread_num ();
  _18 = (unsigned int) _17;
  q.6_19 = num_threads_12 / _16;
  tt.7_20 = num_threads_12 % _16;
  if (_18 < tt.7_20)
    goto <bb 17>;
  else
    goto <bb 5>;

  <bb 5>:
  # q.6_3 = PHI <q.6_21(17), q.6_19(4)>
  # tt.7_4 = PHI <0(17), tt.7_20(4)>
  _22 = q.6_3 * _18;
  _23 = tt.7_4 + _22;
  _24 = q.6_3 + _23;
  if (_23 >= _24)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 6>:
  num_points_13 = *.omp_data_i_11(D).num_points;
  _59 = num_points_13 / num_threads_12;
  _57 = num_points_13 % num_threads_12;

  <bb 7>:
  # inside_points_1 = PHI <0(6), inside_points_30(16)>
  # index_5 = PHI <_23(6), index_31(16)>
  _9 = index_5 < _57;
  _29 = (unsigned int) _9;
  num_points_per_thread_27 = _29 + _59;
  seed = index_5;
  if (num_points_per_thread_27 != 0)
    goto <bb 8>;
  else
    goto <bb 14>;

  <bb 8>:

  <bb 9>:
  # local_count_64 = PHI <0(8), local_count_47(13)>
  # i_55 = PHI <0(8), i_46(13)>
  _34 = rand_r (&seed);
  _35 = (double) _34;
  x_36 = _35 / 2.147483647e+9;
  _37 = rand_r (&seed);
  _38 = (double) _37;
  y_39 = _38 / 2.147483647e+9;
  __printf_chk (1, "Thread %d - Point %f %f\n", index_5, x_36, y_39);
  _40 = x_36 * x_36;
  _41 = y_39 * y_39;
  _42 = _40 + _41;
  if (_42 <= 1.0e+0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  local_count_44 = local_count_64 + 1;

  <bb 11>:
  # local_count_47 = PHI <local_count_64(9), local_count_44(10)>
  i_46 = i_55 + 1;
  if (num_points_per_thread_27 > i_46)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:
  # local_count_48 = PHI <local_count_47(11)>
  goto <bb 14>;

  <bb 13>:
  goto <bb 9>;

  <bb 14>:
  # local_count_65 = PHI <local_count_48(12), 0(7)>
  seed ={v} {CLOBBER};
  inside_points_30 = inside_points_1 + local_count_65;
  index_31 = index_5 + 1;
  if (_24 > index_31)
    goto <bb 16>;
  else
    goto <bb 15>;

  <bb 15>:
  # inside_points_54 = PHI <inside_points_30(14)>
  goto <bb 3>;

  <bb 16>:
  goto <bb 7>;

  <bb 17>:
  q.6_21 = q.6_19 + 1;
  goto <bb 5>;

}


