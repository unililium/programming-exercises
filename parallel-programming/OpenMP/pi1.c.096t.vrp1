
;; Function main._omp_fn.0 (main._omp_fn.0, funcdef_no=30, decl_uid=3074, cgraph_uid=32, symbol_order=32)

Created preheader block for loop 1
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 7 16 8 9 10 11 12 13 17 14 15
;;
;; Loop 1
;;  header 16, latch 17
;;  depth 1, outer 0
;;  nodes: 16 17 13 12 8 11 9 10 14
;;
;; Loop 2
;;  header 12, latch 11
;;  depth 2, outer 1
;;  nodes: 12 11 9 10
;; 2 succs { 4 3 }
;; 3 succs { 1 }
;; 4 succs { 15 5 }
;; 5 succs { 7 3 }
;; 7 succs { 16 }
;; 16 succs { 14 8 }
;; 8 succs { 12 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 9 13 }
;; 13 succs { 17 3 }
;; 17 succs { 16 }
;; 14 succs { 8 }
;; 15 succs { 5 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

local_count_29 -> { local_count_43 }
Incremental SSA update started at block: 12
Number of blocks in CFG: 18
Number of blocks to update: 5 ( 28%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

index_28 -> { index_5 }
index_55 -> { index_5 }
.omp_data_i_56 -> { .omp_data_i_11(D) }
num_threads_57 -> { num_threads_12 }
_58 -> { _18 }
_59 -> { _18 }
tt.7_60 -> { tt.7_20 }
tt.7_61 -> { tt.7_20 }
_62 -> { _23 }
_63 -> { _24 }
index_64 -> { index_31 }
i_65 -> { i_45 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 21
Number of blocks to update: 17 ( 81%)



Value ranges after VRP:

inside_points_1: VARYING
inside_points_2: VARYING
q.6_3: [0, +INF]
tt.7_4: [0, 4294967294]
index_5: [0, 4294967294]  EQUIVALENCES: { } (0 elements)
iftmp.2_6: [0, 1]
.MEM_7: VARYING
.MEM_8: VARYING
index_9: [0, 4294967294]  EQUIVALENCES: { _23 } (1 elements)
.omp_data_i_11(D): ~[0, 0]
num_threads_12: VARYING
num_points_13: VARYING
.MEM_14: VARYING
_15: VARYING
_16: [0, +INF]
_17: VARYING
_18: [0, +INF]
q.6_19: [0, +INF]
tt.7_20: [0, 4294967294]
q.6_21: [0, +INF]
_22: [0, +INF]
_23: [0, +INF]
_24: [0, +INF]
_25: [0, +INF]
_26: [0, 4294967294]
num_points_per_thread_27: [0, +INF]
index_28: [0, 4294967293]  EQUIVALENCES: { index_5 } (1 elements)
local_count_29: [local_count_43, local_count_43]
inside_points_30: [0, +INF]
index_31: [1, +INF]
_32: ~[0B, 0B]
_34: VARYING
_35: VARYING
x_36: VARYING
_37: VARYING
_38: VARYING
y_39: VARYING
_40: VARYING
_41: VARYING
_42: VARYING
local_count_43: VARYING
local_count_44: [0, +INF]
i_45: VARYING
i_46: [1, +INF]
local_count_47: VARYING
.MEM_48: VARYING
inside_points_54: [0, 0]
index_55: [0, 4294967294]  EQUIVALENCES: { index_5 } (1 elements)
.omp_data_i_56: ~[0, 0]  EQUIVALENCES: { .omp_data_i_11(D) } (1 elements)
num_threads_57: ~[0, 0]  EQUIVALENCES: { num_threads_12 } (1 elements)
_58: [0, 4294967293]  EQUIVALENCES: { _18 } (1 elements)
_59: [0, +INF]  EQUIVALENCES: { _18 } (1 elements)
tt.7_60: [1, 4294967294]  EQUIVALENCES: { tt.7_20 } (1 elements)
tt.7_61: [0, 4294967294]  EQUIVALENCES: { tt.7_20 } (1 elements)
_62: [0, 4294967294]  EQUIVALENCES: { _23 } (1 elements)
_63: [1, +INF]  EQUIVALENCES: { _24 } (1 elements)
index_64: [1, 4294967294]  EQUIVALENCES: { index_31 } (1 elements)
i_65: [0, 4294967294]  EQUIVALENCES: { i_45 } (1 elements)


Removing basic block 14
Removing basic block 17
Removing basic block 18
Removing basic block 19
main._omp_fn.0 (struct .omp_data_s.3 & restrict .omp_data_i)
{
  unsigned int seed;
  unsigned int i;
  unsigned int local_count;
  double x;
  double y;
  unsigned int D.3169;
  unsigned int num_points_per_thread;
  unsigned int index;
  unsigned int num_points;
  unsigned int num_threads;
  unsigned int inside_points;
  unsigned int q.6_3;
  unsigned int tt.7_4;
  unsigned int iftmp.2_6;
  int _15;
  unsigned int _16;
  int _17;
  unsigned int _18;
  unsigned int q.6_19;
  unsigned int tt.7_20;
  unsigned int q.6_21;
  unsigned int _22;
  unsigned int _23;
  unsigned int _24;
  unsigned int _25;
  unsigned int _26;
  unsigned int * _32;
  int _34;
  double _35;
  int _37;
  double _38;
  double _40;
  double _41;
  double _42;

  <bb 2>:
  num_threads_12 = *.omp_data_i_11(D).num_threads;
  num_points_13 = *.omp_data_i_11(D).num_points;
  if (num_threads_12 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  # inside_points_2 = PHI <0(5), inside_points_30(14), 0(2)>
  _32 = &.omp_data_i_11(D)->inside_points;
  __atomic_fetch_add_4 (_32, inside_points_2, 0);
  return;

  <bb 4>:
  _15 = __builtin_omp_get_num_threads ();
  _16 = (unsigned int) _15;
  _17 = __builtin_omp_get_thread_num ();
  _18 = (unsigned int) _17;
  q.6_19 = num_threads_12 / _16;
  tt.7_20 = num_threads_12 % _16;
  if (_18 < tt.7_20)
    goto <bb 15>;
  else
    goto <bb 5>;

  <bb 5>:
  # q.6_3 = PHI <q.6_21(15), q.6_19(4)>
  # tt.7_4 = PHI <0(15), tt.7_20(4)>
  _22 = q.6_3 * _18;
  _23 = tt.7_4 + _22;
  _24 = q.6_3 + _23;
  if (_23 >= _24)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 6>:
  # inside_points_54 = PHI <0(5)>
  # index_9 = PHI <_23(5)>

  <bb 7>:
  # inside_points_1 = PHI <0(6), inside_points_30(14)>
  # index_5 = PHI <index_9(6), index_31(14)>
  _25 = num_points_13 / num_threads_12;
  _26 = num_points_13 % num_threads_12;
  if (index_5 < _26)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:

  <bb 9>:
  # iftmp.2_6 = PHI <1(7), 0(8)>
  num_points_per_thread_27 = iftmp.2_6 + _25;
  seed = index_5;
  goto <bb 13>;

  <bb 10>:
  _34 = rand_r (&seed);
  _35 = (double) _34;
  x_36 = _35 / 2.147483647e+9;
  _37 = rand_r (&seed);
  _38 = (double) _37;
  y_39 = _38 / 2.147483647e+9;
  __printf_chk (1, "Thread %d - Point %f %f\n", index_5, x_36, y_39);
  _40 = x_36 * x_36;
  _41 = y_39 * y_39;
  _42 = _40 + _41;
  if (_42 <= 1.0e+0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  local_count_44 = local_count_43 + 1;

  <bb 12>:
  # local_count_47 = PHI <local_count_43(10), local_count_44(11)>
  i_46 = i_45 + 1;

  <bb 13>:
  # i_45 = PHI <0(9), i_46(12)>
  # local_count_43 = PHI <0(9), local_count_47(12)>
  if (num_points_per_thread_27 > i_45)
    goto <bb 10>;
  else
    goto <bb 14>;

  <bb 14>:
  # local_count_29 = PHI <local_count_43(13)>
  seed ={v} {CLOBBER};
  inside_points_30 = inside_points_1 + local_count_29;
  index_31 = index_5 + 1;
  if (_24 > index_31)
    goto <bb 7>;
  else
    goto <bb 3>;

  <bb 15>:
  q.6_21 = q.6_19 + 1;
  goto <bb 5>;

}



;; Function check_points (check_points, funcdef_no=28, decl_uid=3015, cgraph_uid=28, symbol_order=28)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

local_count_24 -> { local_count_3 }
Incremental SSA update started at block: 6
Number of blocks in CFG: 8
Number of blocks to update: 5 ( 62%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_25 -> { i_1 }
Incremental SSA update started at block: 6
Number of blocks in CFG: 8
Number of blocks to update: 3 ( 38%)



Value ranges after VRP:

i_1: [0, +INF]
local_count_2: VARYING
local_count_3: VARYING
.MEM_4: VARYING
num_points_per_thread_8(D): VARYING
_10: VARYING
_11: VARYING
x_12: VARYING
_14: VARYING
_15: VARYING
y_16: VARYING
_17: VARYING
_18: VARYING
_19: VARYING
local_count_20: [0, +INF]
i_21: [0, +INF]
local_count_24: [local_count_3, local_count_3]
i_25: [0, num_points_per_thread_8(D) + 4294967295]  EQUIVALENCES: { i_1 } (1 elements)


check_points (unsigned int index, unsigned int num_points_per_thread)
{
  double y;
  double x;
  unsigned int local_count;
  unsigned int i;
  unsigned int seed;
  int _10;
  double _11;
  int _14;
  double _15;
  double _17;
  double _18;
  double _19;

  <bb 2>:
  seed = index_6(D);
  goto <bb 6>;

  <bb 3>:
  _10 = rand_r (&seed);
  _11 = (double) _10;
  x_12 = _11 / 2.147483647e+9;
  _14 = rand_r (&seed);
  _15 = (double) _14;
  y_16 = _15 / 2.147483647e+9;
  __printf_chk (1, "Thread %d - Point %f %f\n", index_6(D), x_12, y_16);
  _17 = x_12 * x_12;
  _18 = y_16 * y_16;
  _19 = _17 + _18;
  if (_19 <= 1.0e+0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  local_count_20 = local_count_3 + 1;

  <bb 5>:
  # local_count_2 = PHI <local_count_3(3), local_count_20(4)>
  i_21 = i_1 + 1;

  <bb 6>:
  # i_1 = PHI <0(2), i_21(5)>
  # local_count_3 = PHI <0(2), local_count_2(5)>
  if (i_1 < num_points_per_thread_8(D))
    goto <bb 3>;
  else
    goto <bb 7>;

  <bb 7>:
  # local_count_24 = PHI <local_count_3(6)>
  seed ={v} {CLOBBER};
  return local_count_24;

}



;; Function main (main, funcdef_no=29, decl_uid=3027, cgraph_uid=29, symbol_order=29) (executed once)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

argv_38 -> { argv_5(D) }
Incremental SSA update started at block: 4
Number of blocks in CFG: 6
Number of blocks to update: 1 ( 17%)



Value ranges after VRP:

.MEM_1: VARYING
argc_2(D): VARYING
stdout.0_4: VARYING
argv_5(D): VARYING
_6: VARYING
num_points_7: [0, +INF]
_8: VARYING
num_threads_9: [0, +INF]
_11: VARYING
stdout.0_12: VARYING
_15: VARYING
stdout.0_16: VARYING
inside_points_21: VARYING
_23: VARYING
_24: VARYING
_25: VARYING
pi_26: VARYING
stdout.0_27: VARYING
_28: VARYING
_29: VARYING
_30: VARYING
argv_38: ~[0B, 0B]  EQUIVALENCES: { argv_5(D) } (1 elements)


main (int argc, char * * argv)
{
  double pi;
  unsigned int inside_points;
  unsigned int num_threads;
  unsigned int num_points;
  struct .omp_data_s.3 .omp_data_o.5;
  struct _IO_FILE * stdout.0_4;
  char * _6;
  char * _8;
  int _11;
  struct _IO_FILE * stdout.0_12;
  int _15;
  struct _IO_FILE * stdout.0_16;
  double _23;
  double _24;
  double _25;
  struct _IO_FILE * stdout.0_27;
  long int _28;
  int _29;
  long int _30;

  <bb 2>:
  if (argc_2(D) != 3)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  stdout.0_4 = stdout;
  __builtin_fwrite ("Wrong number of parameters\n", 1, 27, stdout.0_4);
  goto <bb 5>;

  <bb 4>:
  _6 = MEM[(char * *)argv_5(D) + 8B];
  _30 = strtol (_6, 0B, 10);
  num_points_7 = (unsigned int) _30;
  __printf_chk (1, "Number of points is %d\n", num_points_7);
  _8 = MEM[(char * *)argv_5(D) + 16B];
  _28 = strtol (_8, 0B, 10);
  _29 = (int) _28;
  num_threads_9 = (unsigned int) _28;
  _11 = omp_get_max_threads ();
  stdout.0_12 = stdout;
  __fprintf_chk (stdout.0_12, 1, "%d\n", _11);
  omp_set_num_threads (_29);
  _15 = omp_get_max_threads ();
  stdout.0_16 = stdout;
  __fprintf_chk (stdout.0_16, 1, "%d\n", _15);
  .omp_data_o.5.inside_points = 0;
  .omp_data_o.5.num_threads = num_threads_9;
  .omp_data_o.5.num_points = num_points_7;
  __builtin_GOMP_parallel (main._omp_fn.0, &.omp_data_o.5, 0, 0);
  inside_points_21 = .omp_data_o.5.inside_points;
  .omp_data_o.5 ={v} {CLOBBER};
  _23 = (double) inside_points_21;
  _24 = _23 * 4.0e+0;
  _25 = (double) num_points_7;
  pi_26 = _24 / _25;
  stdout.0_27 = stdout;
  __fprintf_chk (stdout.0_27, 1, "Computed pi is %f\n", pi_26);

  <bb 5>:
  return 0;

}


