#lang racket
(define (sos l)
  (define (rec l acc)
    (if (null? l)
        acc
        (let ([x (car l)]
              [xs (cdr l)])
          (rec xs (+ acc (* x x))))))
    (rec l 0))

(define (flatten l)
  (define (rec l acc)
    (if (null? l)
        acc
        (let ([x (car l)]
              [xs (cdr l)])
          (if (not (list? x))
              (rec xs (cons x acc))
              (rec xs (rec x acc))))))
  (reverse (rec l '())))     

(define (mytake l n)
  (if (or (null? l) (zero? n))
      '()
      (cons (car l) (take (cdr l) (- n 1)))))

(define (slice l s e)
  (if (zero? s)
      (mytake l e)
      (slice (cdr l) (- s 1) e)))